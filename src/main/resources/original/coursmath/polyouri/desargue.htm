
<!DOCTYPE HTML>
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<title>Théorème de Desargues - Mathématique du secondaire</title>
<meta name="author" content="Xavier Hubaut" />
<meta name="description" content="Quadrique" />
<meta name="keywords" content="hyperboloïde, une nappe, équations" />
<link type="text/css" rel="stylesheet" href="../commun.css" media="screen" />
<link type="text/css" rel="stylesheet" href="../3di/3di.css" media="screen" />
<link type="text/css" rel="stylesheet" href="../pop.css" media="screen" />
<link type="text/css" rel="stylesheet" href="../impr.css" media="print" />
<link rel="shortcut icon" type="images/x-icon" href="../favicon.ico" />
<script type="text/javascript" src="../util.js"></script>
<script type="text/javascript" src="three.min.js"></script>
<script type="text/javascript" src="WebGL.js"></script>
<script type="text/javascript" src="TrackballControls.js"></script>

<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    tex2jax: { inlineMath: [['$','$'],['\\(','\\)']] }
  });
</script>
<script type="text/javascript" async
	src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.6/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
<script type="text/javascript">

  if (location.protocol!='file:')
  {
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-2637570-4', 'auto');
  ga('send', 'pageview');
  }

</script>
</head>

<body>
<div id="container">
<a id="H"></a>
<!--
	<div id="logo">
<br />
		<div class="ban">
<a href="../somm.htm">Mathématique du secondaire</a>
		</div>
<br />
		<div class="source">
<a href="http://xavier.hubaut.info/" target="ext">Xavier Hubaut,  </a><i>professeur émérite </i> - <a href="http://www.ulb.ac.be/" target="ext">Université Libre de Bruxelles</a>
		</div>
<br /><br />
	</div>
-->
	<div class="titre">
<br />
Le théorème de Desargues
<br />
	</div>
	<div class="stitre">
5 points c'est tout !
	</div>
<br /><br />
	<div class="central">
		<div class="texte">

<p>Voici une figure formée de 5 points qui permet de démontrer le théorème de Desargues.</p>
<p>Nous supposerons que ces 5 points sont quelconques, en position générale, c'est-à-dire que 4 points ne sont jamais situés dans un même plan, ce qui implique que 3 points ne sont jamais alignés.</p>

<div id="polanim" class="gauche" style="width:360px; height:360px; border:2px solid #f39; ">
<script>
	var camera, scene, renderer;
	var drawbox;
	var camera2, scene2;
	
	var scale = 10;

	init();
	animate();

	function init() {
	
		var width=360; 
		var height=360;
		// renderer

		renderer = new THREE.WebGLRenderer();
		renderer.setClearColor( 0xfffff0 ); // Background color
		//renderer.setSize(  window.innerWidth, window.innerHeight  );
		renderer.setSize( width, height );
		drawbox = document.getElementById( "polanim" );
		drawbox.appendChild( renderer.domElement );
		
		// world

		scene = new THREE.Scene();
		scene2 = new THREE.Scene();
		
		camera2 = new THREE.Camera();

		// camera
		
		//camera = new THREE.PerspectiveCamera( 60, width / height, 1, 1000 );
		camera = new THREE.OrthographicCamera(  - width / 2, width / 2, height / 2 ,-height / 2, 1, 1000 );
		camera.position.x = 120;
		camera.position.y = 120;
		camera.position.z = 120;
		// controls

		controls = new THREE.TrackballControls( camera, drawbox );

		controls.rotateSpeed = 1.0;
		controls.zoomSpeed = 1.2;
		controls.minDistance = 10;
		controls.panSpeed = 0.8;

		controls.noZoom = true;
		controls.noPan = false;

		controls.staticMoving = false;
		controls.dynamicDampingFactor = 0.07;
		
		controls.addEventListener( 'change', render );

		draw(scene, scale);

		// lights
		
		light = new THREE.DirectionalLight( 0xff0000, 1 );
		light.position.set( 0, 0, 1 ).normalize();
		scene.add( light );

		light = new THREE.DirectionalLight( 0x00ffff, 0.6 );
		light.position.set( 0, 0, -1 ).normalize();
		scene.add( light );
		
		light = new THREE.DirectionalLight( 0xffff00, 1.0 );
		light.position.set( 1, 0, 0 ).normalize();
		scene.add( light );
		
		light = new THREE.DirectionalLight( 0x0000ff, 1 );
		light.position.set( -1, 0, 0 ).normalize();
		scene.add( light );
		
		light = new THREE.DirectionalLight( 0x00ff00, 0.7 );
		light.position.set( 0, 1, 0 ).normalize();
		scene.add( light );

		light = new THREE.DirectionalLight( 0xff00ff, 1 );
		light.position.set( 0, -1, 0 ).normalize();
		scene.add( light );
	}
	
	function particleRender( context ) {
				
		// we get passed a reference to the canvas context
		context.beginPath();
		// and we just have to draw our shape at 0,0 - in this
		// case an arc from 0 to 2Pi radians or 360º - a full circle!
		context.arc( 0, 0, 1, 0,  Math.PI * 2, true );
		context.fill();
	};
	
	function draw(scene, scale) {
		 var materialBlue = new THREE.LineBasicMaterial({
			color: 0x0000ff
		});
		
		var materialRed = new THREE.LineBasicMaterial({
			color: 0xff0000
		});
		
		var PI2 = Math.PI * 2;
		var program = function ( context ) {

			context.beginPath();
			context.arc( 0, 0, 1, 0, PI2, true );
			context.fill();

		};

		var materialBlack = new THREE.PointsMaterial( {
			color: 0x000000,
			size: scale
		} );
		
		var materialRedPoint = new THREE.PointsMaterial( {
			color: 0xff0000,
			size: scale
		} );
		
		var geometry;
		var line;
		
		var group = new THREE.Object3D();
		
		var listeLignesBleues = [];
		listeLignesBleues.push(new THREE.Vector3(-4,0,0));
		listeLignesBleues.push(new THREE.Vector3(21,0,0));
		listeLignesBleues.push(new THREE.Vector3(-5,2,0));
		listeLignesBleues.push(new THREE.Vector3(15,-6,0));
		listeLignesBleues.push(new THREE.Vector3(-4,-1,0));
		listeLignesBleues.push(new THREE.Vector3(20,5,0));
		listeLignesBleues.push(new THREE.Vector3(1,2,0));
		listeLignesBleues.push(new THREE.Vector3(11,-8,0));
		listeLignesBleues.push(new THREE.Vector3(1,-2,0));
		listeLignesBleues.push(new THREE.Vector3(16,13,0));
		listeLignesBleues.push(new THREE.Vector3(3,4,0));
		listeLignesBleues.push(new THREE.Vector3(8,-11,0));
		listeLignesBleues.push(new THREE.Vector3(6,-11,0));
		listeLignesBleues.push(new THREE.Vector3(14,13,0));
		listeLignesBleues.push(new THREE.Vector3(12,12,0));
		listeLignesBleues.push(new THREE.Vector3(19,-2,0));
		listeLignesBleues.push(new THREE.Vector3(4,-12,0));
		listeLignesBleues.push(new THREE.Vector3(19,8,0));
		listeLignesBleues.push(new THREE.Vector3(6,-6,0));
		listeLignesBleues.push(new THREE.Vector3(20,1,0));
		
		for ( var i = 0; i < listeLignesBleues.length; i+=2)
		{
			geometry = new THREE.BufferGeometry();
			var vertices = [];
			vertices = vertices.concat(listeLignesBleues[i].toArray());
			vertices = vertices.concat(listeLignesBleues[i+1].toArray());
			geometry.setAttribute( 'position', new THREE.BufferAttribute( new Float32Array(vertices), 3 ) );
			line = new THREE.Line(geometry, materialBlue);
			group.add(line);
		}
		
		var listeLignesRouges = [];
		listeLignesRouges.push(new THREE.Vector3(-2,0,-2));
		listeLignesRouges.push(new THREE.Vector3(15,0,15));
		listeLignesRouges.push(new THREE.Vector3(6,0,6));
		listeLignesRouges.push(new THREE.Vector3(16,4,0));
		listeLignesRouges.push(new THREE.Vector3(6,0,6));
		listeLignesRouges.push(new THREE.Vector3(18,0,0));
		listeLignesRouges.push(new THREE.Vector3(6,0,6));
		listeLignesRouges.push(new THREE.Vector3(10,-4,0));
		listeLignesRouges.push(new THREE.Vector3(14,0,14));
		listeLignesRouges.push(new THREE.Vector3(4,1,0));
		listeLignesRouges.push(new THREE.Vector3(14,0,14));
		listeLignesRouges.push(new THREE.Vector3(3,0,0));
		listeLignesRouges.push(new THREE.Vector3(14,0,14));
		listeLignesRouges.push(new THREE.Vector3(5,-2,0));
		listeLignesRouges.push(new THREE.Vector3(7.23,0,5.385));
		listeLignesRouges.push(new THREE.Vector3(13,10,0));
		listeLignesRouges.push(new THREE.Vector3(7.23,0,5.385));
		listeLignesRouges.push(new THREE.Vector3(8,-5,0));
		listeLignesRouges.push(new THREE.Vector3(7.6,0.64,5.04));
		listeLignesRouges.push(new THREE.Vector3(7,-8,0));
		
		for ( var i = 0; i < listeLignesRouges.length; i+=2)
		{
			geometry = new THREE.BufferGeometry();
			var vertices = [];
			vertices = vertices.concat(listeLignesRouges[i].toArray());
			vertices = vertices.concat(listeLignesRouges[i+1].toArray());
			geometry.setAttribute( 'position', new THREE.BufferAttribute( new Float32Array(vertices), 3 ) );
			line = new THREE.Line(geometry, materialRed);
			group.add(line);
		}
		
		var listePointsVerts = [];
		listePointsVerts.push(new THREE.Vector3(6,0,6));
		listePointsVerts.push(new THREE.Vector3(7.6,0.64,5.04));
		listePointsVerts.push(new THREE.Vector3(7.23,0,5.385));
		listePointsVerts.push(new THREE.Vector3(7.45,-1.45,3.82));
		listePointsVerts.push(new THREE.Vector3(14,0,14));
			
		var particle;

		var pointGeometry = new THREE.BufferGeometry();
		var vertices = [];
		for ( var i = 0; i < listePointsVerts.length; i++ ) {
			vertices = vertices.concat(listePointsVerts[i].toArray());
		}
		pointGeometry.setAttribute( 'position', new THREE.BufferAttribute( new Float32Array(vertices), 3 ) );
		particle = new THREE.Points(pointGeometry, materialBlack);
		group.add( particle );
		
		var listePointsRouges = [];
		listePointsRouges.push(new THREE.Vector3(0,0,0));
		listePointsRouges.push(new THREE.Vector3(4,1,0));
		listePointsRouges.push(new THREE.Vector3(16,4,0));
		listePointsRouges.push(new THREE.Vector3(3,0,0));
		listePointsRouges.push(new THREE.Vector3(18,0,0));
		listePointsRouges.push(new THREE.Vector3(5,-2,0));
		listePointsRouges.push(new THREE.Vector3(10,-4,0));
		listePointsRouges.push(new THREE.Vector3(7,-8,0));
		listePointsRouges.push(new THREE.Vector3(8,-5,0));
		listePointsRouges.push(new THREE.Vector3(13,10,0));
		
		var pointGeometry = new THREE.BufferGeometry();
		var vertices = [];
		for ( var i = 0; i < listePointsRouges.length; i++ ) {
			vertices = vertices.concat(listePointsRouges[i].toArray());
		}
		pointGeometry.setAttribute( 'position', new THREE.BufferAttribute( new Float32Array(vertices), 3 ) );
		particle = new THREE.Points(pointGeometry, materialRedPoint);
		group.add( particle );
		
		group.position.set(-8 * scale, .3 * scale, -2 * scale); // décalage
		group.scale.set( scale, scale, scale);
		group.rotation.set( 5*Math.PI/4, 0, 0 );
		
		scene.add( group );
		
		var texture = new THREE.TextureLoader().load('nuages.jpg');
		var backgroundMesh = new THREE.Mesh(new THREE.PlaneGeometry(2,2,1),new THREE.MeshBasicMaterial({map:texture}));
		backgroundMesh.material.depthTest = false;
		backgroundMesh.material.depthWrite = false;
		scene2.add( camera2 );scene2.add( backgroundMesh );
	}

	//

	function animate() {

		// camera animation

		requestAnimationFrame( animate );
		controls.update(); render();
		
	}

	function render() {
		renderer.autoClear = false;
		renderer.clear();
		renderer.render( scene2, camera2 );
		renderer.render( scene, camera );

	}
</script>
</div>
<p>Ces 5 points (noirs) pris 2 à 2 déterminent 10 droites (rouges); pris 3 à 3 ils déterminent 10 plans. La figure formée des 10 droites et des 10 plans permet de retrouver, quand elle est sectionnée par un plan, la configuration de Desargues formée de 10 points (rouges) et 10 droites (bleues).</p>

<p>Généralement, dans le plan cette configuration est présentée comme formée de deux triangles perspectifs, c'est-à-dire tels que les droites qui joignent les sommets correspondants sont concourantes. Enfin les points d'intersection des côtés homologues sont colinéaires.</p>
 
<p>Comme les 5 points jouent tous le même rôle, les 10 droites et les 10 plans qu'ils déterminent ont chacun les mêmes propriétés d'incidence. Étant donnée une configuration de Desargues, celle-ci peut donc être vue de 10 manières différentes. Chacun des points (intersection d'une droite passant 2 des 5 points) peut être considéré comme centre de perspective de deux triangles. La droite (intersection du plan déterminé par les 3 autres points) est l'axe de la perspective.</p>

<p>Inversement partant d'une configuration de Desargues il n'est guère difficile de la "remonter" dans l'espace et de démontrer ainsi le théorème.</p>
 		</div>
	</div>
	<div class="final">
		<div id="fermeture">
<br />
<img alt="fermer" src="../fermer.gif" OnClick="javascript=parent.close()">
<br />
		</div>
	</div>    
</div>
</body>
</html>