<!DOCTYPE HTML>
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<title>Paraboloïde hyperbolique - Quadriques - En 3 dimensions</title>
<meta name="author" content="Xavier Hubaut" />
<meta name="description" content="Quadrique" />
<meta name="keywords" content="hyperboloïde, une nappe, équations" />
<link type="text/css" rel="stylesheet" href="../commun.css" media="screen" />
<link type="text/css" rel="stylesheet" href="../3di/3di.css" media="screen" />
<link type="text/css" rel="stylesheet" href="../pop.css" media="screen" />
<link type="text/css" rel="stylesheet" href="../impr.css" media="print" />
<link rel="shortcut icon" type="images/x-icon" href="../favicon.ico" />
<script type="text/javascript" src="../util.js"></script>
<script type="text/javascript" src="three.min.js"></script>
<script type="text/javascript" src="WebGL.js"></script>
<script type="text/javascript" src="TrackballControls.js"></script>

<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    tex2jax: { inlineMath: [['$','$'],['\\(','\\)']] }
  });
</script>
<script type="text/javascript" async
	src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.6/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
<script type="text/javascript">

  if (location.protocol!='file:')
  {
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-2637570-4', 'auto');
  ga('send', 'pageview');
  }

</script>
</head>

<body>
<div id="container">
<a id="H"></a>
<!--
	<div id="logo">
<br />
		<div class="ban">
<a href="../somm.htm">Mathématique du secondaire</a>
		</div>
<br />
		<div class="source">
<a href="http://xavier.hubaut.info/" target="ext">Xavier Hubaut,  </a><i>professeur émérite </i> - <a href="http://www.ulb.ac.be/" target="ext">Université Libre de Bruxelles</a>
		</div>
<br /><br />
	</div>
-->
	<div class="titre">
<br />
Paraboloïde hyperbolique
<br />
	</div>
	<div class="stitre">
	</div>
<br /><br />
	<div class="central">
		<div class="texte">

<p>Le paraboloïde hyperbolique est probablement la quadrique la plus connue. Non pas sous son nom "mathématique" mais par sa présence dans de nombreuses situations mathématiques ou physiques.</p>
<p>Elle est à la fois courbe, dans deux sens opposés et, en même temps elle possède deux familles de droites.</p>

<p>L'équation du paraboloïde hyperbolique peut également s'écrire sous une autre forme, plus simple :
\( z=k.xy \). Les deux familles de droites sont alors: \(x=\lambda\) et \(z=\lambda y\) ainsi que \(y=\mu\) et \(z=\mu x\).</p>

<p>Dans ce système de coordonnées, les boutons + (resp. -) placés au dessus de l'animation vous permettent, en partant du plan coordonné, d'augmenter (resp. de diminuer) la valeur de k qui a été initialement fixée à 0.</p>

<div class="gauche" style="width:360px; height:60px;">
<br>
<button class="centre" type="button" onclick="add();return false;" style="background-color:#ffe;"><img alt="plus" src="../plus.png"></button>
<img alt="" src="../dot.png" width=100 height=1>
<button class="centre" type="button" onclick="sub();return false;" style="background-color:#ffe;"><img alt="moins" src="../moins.png"></button>
</div>

<div id="polanim" class="gauche" style="width:360px; height:360px; border:2px solid #f39;">
<script>
	var camera, scene, renderer;
	var drawbox;
	
	var nombreDeCotes = 12;
	var k = 0;
	
	var scale = 50;

	init();
	animate();

	function add() {

		k += 0.2 * scale;
		if ( k > scale * 2 )
			k = scale * 2;
		
		var obj, i;
		for ( i = scene.children.length - 1; i >= 0 ; i -- ) {
			obj = scene.children[ i ];
			if ( obj !== THREE.Camera) {
				scene.remove(obj);
			}
		}
		
		draw(scene, scale, nombreDeCotes);
	}

	function sub() {

		k -= 0.2 * scale;
		if ( k < -scale * 2 )
			k = -scale * 2;
		var obj, i;
		for ( i = scene.children.length - 1; i >= 0 ; i -- ) {
			obj = scene.children[ i ];
			if ( obj !== THREE.Camera) {
				scene.remove(obj);
			}
		}
		
		draw(scene, scale, nombreDeCotes);
	}

	function init() {
	
		var width=360; 
		var height=360;
		// renderer

		renderer = THREE.WEBGL.isWebGLAvailable() ? new THREE.WebGLRenderer(): new THREE.CanvasRenderer();
		//renderer = new THREE.CanvasRenderer();
		renderer.setClearColor( 0xfffff0 ); // Background color
		//renderer.setSize(  window.innerWidth, window.innerHeight  );
		renderer.setSize( width, height );
		drawbox = document.getElementById( "polanim" );
		drawbox.appendChild( renderer.domElement );
		
		// world

		scene = new THREE.Scene();

		// camera
		
		camera = new THREE.OrthographicCamera( -width / 2, width / 2, height / 2, -height / 2, 1, 1000 );
		//camera = new THREE.PerspectiveCamera( 60, width/height, 1, 1000 );
		camera.position.y = 60;
		camera.position.x = 180;
		camera.position.z = 0;
		
		// controls

		controls = new THREE.TrackballControls( camera, drawbox );

		controls.rotateSpeed = 1.0;
		controls.zoomSpeed = 1.2;
		controls.minDistance = 33;
		controls.panSpeed = 0.8;

		controls.noZoom = true;
		controls.noPan = false;

		controls.staticMoving = false;
		controls.dynamicDampingFactor = 0.07;
		
		controls.addEventListener( 'change', render );

		draw(scene, scale, nombreDeCotes);

		// lights
		
		light = new THREE.DirectionalLight( 0xff0000, 1 );
		light.position.set( 0, 0, 1 ).normalize();
		scene.add( light );

		light = new THREE.DirectionalLight( 0x00ffff, 0.6 );
		light.position.set( 0, 0, -1 ).normalize();
		scene.add( light );
		
		light = new THREE.DirectionalLight( 0xffff00, 1.0 );
		light.position.set( 1, 0, 0 ).normalize();
		scene.add( light );
		
		light = new THREE.DirectionalLight( 0x0000ff, 1 );
		light.position.set( -1, 0, 0 ).normalize();
		scene.add( light );
		
		light = new THREE.DirectionalLight( 0x00ff00, 0.7 );
		light.position.set( 0, 1, 0 ).normalize();
		scene.add( light );

		light = new THREE.DirectionalLight( 0xff00ff, 1 );
		light.position.set( 0, -1, 0 ).normalize();
		scene.add( light );
	}
	
	function draw(scene, scale, nombreDeCotes) {
		 var materialBlue = new THREE.LineBasicMaterial({
			color: 0x0000ff,
			linewidth: 1
		});
		
		var materialRed = new THREE.LineBasicMaterial({
			color: 0xff0000,
			linewidth: 1
		});
		
		var a = 2 * scale;
		var b = 3 * scale;
		var c = 1 * scale;
		
		var coinSuperieurGauche = new THREE.Vector3(-a, k, c);
		var coinSuperieurDroit = new THREE.Vector3(a, -k, b);
		var coinInferieurDroit = new THREE.Vector3(a, k, -c);
		var coinInferieurGauche = new THREE.Vector3(-a, -k, -b);
		
		var geometry;
		var line;
		
		for ( var i = 0; i < nombreDeCotes + 1; i++)
		{
			var lambda = i / nombreDeCotes;
			geometry = new THREE.BufferGeometry();
			var vertices = [];
			vertices.push(lambda * coinSuperieurGauche.x + (1-lambda) * coinInferieurGauche.x);
			vertices.push(lambda * coinSuperieurGauche.y + (1-lambda) * coinInferieurGauche.y);
			vertices.push(lambda * coinSuperieurGauche.z + (1-lambda) * coinInferieurGauche.z);
			vertices.push(lambda * coinSuperieurDroit.x + (1-lambda) * coinInferieurDroit.x);
			vertices.push(lambda * coinSuperieurDroit.y + (1-lambda) * coinInferieurDroit.y);
			vertices.push(lambda * coinSuperieurDroit.z + (1-lambda) * coinInferieurDroit.z);
			geometry.setAttribute( 'position', new THREE.BufferAttribute( new Float32Array(vertices), 3 ) );
			line = new THREE.Line(geometry, materialBlue);
			scene.add(line);
		}
		for ( var i = 0; i < nombreDeCotes + 1; i++)
		{
			var lambda = i / nombreDeCotes;
			geometry = new THREE.BufferGeometry();
			var vertices = [];
			vertices.push(lambda * coinSuperieurGauche.x + (1-lambda) * coinSuperieurDroit.x);
			vertices.push(lambda * coinSuperieurGauche.y + (1-lambda) * coinSuperieurDroit.y);
			vertices.push(lambda * coinSuperieurGauche.z + (1-lambda) * coinSuperieurDroit.z);
			vertices.push(lambda * coinInferieurGauche.x + (1-lambda) * coinInferieurDroit.x);
			vertices.push(lambda * coinInferieurGauche.y + (1-lambda) * coinInferieurDroit.y);
			vertices.push(lambda * coinInferieurGauche.z + (1-lambda) * coinInferieurDroit.z);
			geometry.setAttribute( 'position', new THREE.BufferAttribute( new Float32Array(vertices), 3 ) );
			line = new THREE.Line(geometry, materialRed);
			scene.add(line);
		}
		console.log(geometry);
	}

	//

	function animate() {

		// camera animation

		requestAnimationFrame( animate );
		controls.update(); render();
		
	}

	function render() {

		renderer.render( scene, camera );

	}
</script>
</div>
<p>Cette quadrique peut être obtenue de diverses manières. En particulier, à partir d'un quadrilatère en faisant glisser une droite sur une paire de côtés opposés; l'autre paire de côtés opposés détermine une direction de plan et la droite reste parallèle à cette direction.</p>
<p>Son équation peut se ramener à:</p>
\[ z = \frac{x^2}{a^2} - \frac{y^2}{b^2} \]
<br>
<p>Les deux familles de droites ont pour équations :
<table class="centre"><tr><td>
 \[\left \{ \begin{matrix}
z = \lambda(x/a + y/b) \\ \lambda=(x/a - y/b)
\end{matrix} \right.~~~~~~ \]
</td><td>
et
</td><td>
\[~~~~~~\left \{ \begin{matrix}
z = \mu(x/a - y/b) \\ \mu=(x/a + y/b)
\end{matrix} \right. \]
</td></tr></table>

<p>Le paraboloïde hyperbolique possède des points à l'infini formant une conique dégénérée en deux droites.</p>
		</div>
	</div>
	<div class="final">
		<div id="fermeture">
<br />
<img alt="fermer" src="../fermer.gif" OnClick="javascript=parent.close()"><br />
<br /><br />
		</div>
	</div>    
</div>
</body>
</html>