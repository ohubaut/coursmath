
<!DOCTYPE HTML>
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<title>Hyperboloïde à une nappe - Quadriques - En 3 dimensions</title>
<meta name="author" content="Xavier Hubaut" />
<meta name="description" content="Quadrique" />
<meta name="keywords" content="hyperboloïde, une nappe, équations" />
<link type="text/css" rel="stylesheet" href="../commun.css" media="screen" />
<link type="text/css" rel="stylesheet" href="../3di/3di.css" media="screen" />
<link type="text/css" rel="stylesheet" href="../pop.css" media="screen" />
<link type="text/css" rel="stylesheet" href="../impr.css" media="print" />
<link rel="shortcut icon" type="images/x-icon" href="../favicon.ico" />
<script type="text/javascript" src="../util.js"></script>
<script type="text/javascript" src="three.min.js"></script>
<script type="text/javascript" src="WebGL.js"></script>
<script type="text/javascript" src="TrackballControls.js"></script>

<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    tex2jax: { inlineMath: [['$','$'],['\\(','\\)']] }
  });
</script>
<script type="text/javascript" async
	src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.6/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
<script type="text/javascript">

  if (location.protocol!='file:')
  {
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-2637570-4', 'auto');
  ga('send', 'pageview');
  }

</script>
</head>

<body>
<div id="container">
<a id="H"></a>
<!--
	<div id="logo">
<br />
		<div class="ban">
<a href="../somm.htm">Mathématique du secondaire</a>
		</div>
<br />
		<div class="source">
<a href="http://xavier.hubaut.info/" target="ext">Xavier Hubaut,  </a><i>professeur émérite </i> - <a href="http://www.ulb.ac.be/" target="ext">Université Libre de Bruxelles</a>
		</div>
<br /><br />
	</div>
-->
	<div class="titre">
<br />
Hyperboloïde à une nappe
<br />
	</div>
	<div class="stitre">
Les deux familles de droites
	</div>
<br /><br />
	<div class="central">
		<div class="texte">

<p>L'hyperboloïde à une nappe est probablement la quadrique la plus fascinante.</p>
<p>Elle est à la fois courbe, dans deux sens opposés et, en même temps elle possède deux familles de droites.</p>
<p>On peut se rendre compte de la présence de ces deux familles de droites à partir d'un petit modèle très simple à construire.<br>
Un cylindre et ses génératrices peut être fabriqué à partir de deux cercles situés dans des plans parallèles reliés par un axe vertical. Les points homologues sont reliés par des fils élastiques.<br>
En maintenant fixe l'un des cercles et en faisant tourner l'autre, on obtient un hyperboloïde qui se resserre de plus en plus jusqu'à devenir un cône.<br>
Vous pouvez utiliser les boutons situés ci-dessous pour mieux visualiser l'évolution de la surface.</p>

<div class="gauche" style="width:360px; height:40px;">
<button class="centre" type="button" onclick="add();return false;" style="background-color:#ffe;"><img alt="plus" src="../plus.png"></button>
<img alt="" src="../dot.png" width=100 height=1>
<button class="centre" type="button" onclick="sub();return false;" style="background-color:#ffe;"><img alt="moins" src="../moins.png"></button>
</div>

<div id="polanim" class="gauche" style="width:360px; height:360px; border:2px solid #f39;">
<script>
	var camera, scene, renderer;
	var drawbox;
	
	var decalage = 12;
	
	var scale = 120;

	init();
	animate();

	function add() {

		decalage += 1;
		var obj, i;
		for ( i = scene.children.length - 1; i >= 0 ; i -- ) {
			obj = scene.children[ i ];
			if ( obj !== THREE.PlaneGeometry && obj !== THREE.Camera) {
				scene.remove(obj);
			}
		}
		
		draw(scene, scale, decalage);
	}

	function sub() {

		decalage -= 1;
		var obj, i;
		for ( i = scene.children.length - 1; i >= 0 ; i -- ) {
			obj = scene.children[ i ];
			if ( obj !== THREE.PlaneGeometry && obj !== THREE.Camera) {
				scene.remove(obj);
			}
		}
		
		draw(scene, scale, decalage);
	}

	function init() {
	
		var width=360; 
		var height=360;
		// renderer

		renderer = THREE.WEBGL.isWebGLAvailable() ? new THREE.WebGLRenderer(): new THREE.CanvasRenderer();
		//renderer = new THREE.CanvasRenderer();
		renderer.setClearColor( 0xfffff0 ); // Background color
		//renderer.setSize(  window.innerWidth, window.innerHeight  );
		renderer.setSize( width, height );
		drawbox = document.getElementById( "polanim" );
		drawbox.appendChild( renderer.domElement );
		
		// world

		scene = new THREE.Scene();

		// camera
		
		camera = new THREE.OrthographicCamera( -width / 2, width / 2, height / 2, -height / 2, 1, 1000 );
		//camera = new THREE.PerspectiveCamera( 60, width/height, 10, 1000 );
		camera.position.y = 120;
		camera.position.x = 120;
		
		// controls

		controls = new THREE.TrackballControls( camera, drawbox );

		controls.rotateSpeed = 1.0;
		controls.zoomSpeed = 1.2;
		controls.minDistance = 33;
		controls.panSpeed = 0.8;

		controls.noZoom = true;
		controls.noPan = false;

		controls.staticMoving = false;
		controls.dynamicDampingFactor = 0.07;
		
		controls.addEventListener( 'change', render );

		draw(scene, scale, decalage);

		// lights
		
		light = new THREE.DirectionalLight( 0xff0000, 1 );
		light.position.set( 0, 0, 1 ).normalize();
		scene.add( light );

		light = new THREE.DirectionalLight( 0x00ffff, 0.6 );
		light.position.set( 0, 0, -1 ).normalize();
		scene.add( light );
		
		light = new THREE.DirectionalLight( 0xffff00, 1.0 );
		light.position.set( 1, 0, 0 ).normalize();
		scene.add( light );
		
		light = new THREE.DirectionalLight( 0x0000ff, 1 );
		light.position.set( -1, 0, 0 ).normalize();
		scene.add( light );
		
		light = new THREE.DirectionalLight( 0x00ff00, 0.7 );
		light.position.set( 0, 1, 0 ).normalize();
		scene.add( light );

		light = new THREE.DirectionalLight( 0xff00ff, 1 );
		light.position.set( 0, -1, 0 ).normalize();
		scene.add( light );
	}
	
	function draw(scene, scale, decalage) {
		 var materialBlue = new THREE.LineBasicMaterial({
			color: 0x0000ff,
			linewidth: 1			
		});
		
		var materialRed = new THREE.LineBasicMaterial({
			color: 0xff0000,
			linewidth: 1
		});

		var geometry;
		var line;
		var nombreDeCotes = 36;
		var angle = (2 * Math.PI) / nombreDeCotes;
		var ellipseA = 0.5;
		var ellipseB = 0.7;
		for ( var i = 0; i < 2 * nombreDeCotes; i++)
		{
			geometry = new THREE.BufferGeometry();
			var vertices = [];
			vertices.push(ellipseA * scale * Math.sin(angle * (i + decalage)));
			vertices.push(1 * scale);
			vertices.push(ellipseB * scale * Math.cos(angle * (i + decalage)));
			vertices.push(ellipseA * scale * Math.sin(angle * i));
			vertices.push(-1 * scale);
			vertices.push(ellipseB * scale * Math.cos(angle * i));
			geometry.setAttribute( 'position', new THREE.BufferAttribute( new Float32Array(vertices), 3 ) );
			line = new THREE.Line(geometry, materialBlue);
			scene.add(line);
		}
		
		for ( var i = 0; i < 2 * nombreDeCotes; i++)
		{
			geometry = new THREE.BufferGeometry();
			var vertices = [];
			vertices.push(ellipseA * scale * Math.sin(angle * i));
			vertices.push(1 * scale);
			vertices.push(ellipseB * scale * Math.cos(angle * i));
			vertices.push(ellipseA * scale * Math.sin(angle * (i + decalage)));
			vertices.push(-1 * scale);
			vertices.push(ellipseB * scale * Math.cos(angle * (i + decalage)));
			geometry.setAttribute( 'position', new THREE.BufferAttribute( new Float32Array(vertices), 3 ) );
			line = new THREE.Line(geometry, materialRed);
			scene.add(line);
		}
	}

	//

	function animate() {

		// camera animation

		requestAnimationFrame( animate );
		controls.update(); render();
		
	}

	function render() {

		renderer.render( scene, camera );

	}
</script>
</div>
<p>L'équation cartésienne de l'hyperboloïde à une nappe peut se ramener à:</p>

\[ \frac{x^2}{a^2}+\frac{y^2}{b^2}-\frac{z^2}{c^2}=1 \]

<p>Cette équation peut également s'écrire:</p>
\( (x/a - z/c)(x/a + z/c) \)<br> = <br> \((1 - y/b)(1 + y/b) \)
<p class="ni">et peut se ramener, de deux manières distinctes, à un système de deux équations linéaires (de 2 plans) dépendant d'un paramètre (\(\lambda\) ou \(\mu\) ) c'est-à-dire l'équation de deux familles de droites :</p>

\( \left \{ \begin{matrix}
(x/a - z/c) = \lambda(1 + y/b) \\ \lambda(x/a + z/c) = (1 - y/b)
\end{matrix} \right. \)
<br>et<br>
\( \left \{ \begin{matrix}
(x/a + z/c) = \mu(1 + y/b) \\ \mu(x/a - z/c) = (1 - y/b)
\end{matrix} \right. \)<br>
		</div>
	</div>
	<div class="final">
		<div id="fermeture">
<br />
<img alt="fermer" src="../fermer.gif" OnClick="javascript=parent.close()"><br />
<br /><br />
		</div>
	</div>    
</div>
</body>
</html>